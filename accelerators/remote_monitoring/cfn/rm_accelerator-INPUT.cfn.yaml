AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Description: Remote Monitoring IoT accelerator resources and deployment.

Parameters:
  CertificateArn:
    Description: ARN of the activate AWS IoT certificate
    Type: String
  SNSEmail:
    Description: Email to send SNS notification to
    Type: String
  ThingName:
    Description: An IOT Thing to be created.
    Type: String
    Default: IoTRmAccelThing      

Resources:
        
  PolicyIoTRmAccelPipelinePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: "IoTRmAccelPipelinePolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "iot:Publish"
            Resource: "arn:aws:iot:*:*:topic/state"
          -
            Effect: "Allow"
            Action:
              - "iotevents:BatchPutMessage"
            Resource: "arn:aws:iotevents:*:*:input/IoTRmAccelInput"
          -
            Effect: "Allow"
            Action:
              - "iotanalytics:BatchPutMessage"
            Resource: "arn:aws:iotanalytics:*:*:channel/iot_rm_accel_data_channel"
          -
            Effect: "Allow"
            Action:
              - "iotanalytics:BatchPutMessage"
            Resource: "arn:aws:iotanalytics:*:*:channel/iotgatewayrawchannel"
          -
            Effect: "Allow"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "logs:PutMetricFilter"
              - "logs:PutRetentionPolicy"
            Resource: 
              - "arn:aws:logs:*:948909324524:log-group:*:log-stream:*"
              - "arn:aws:logs:*:*:*"
            
  RoleIoTRmAccelPipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: IoTRmAccelPipelineRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - iot.amazonaws.com
            - iotevents.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: PolicyIoTRmAccelPipelinePolicy
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess

  LambdaExecutionRole:
    # Role used by CloudFormation created Lambda functions, used by the custom
    # resource functions to perform their objectives.
    # Overly permissive for iot:* and iotevents:* to reduce Statement complexity
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - iot:*
            - iotevents:*
            Resource: "*"
          - Effect: Allow
            Action:
            - ec2:DescribeReservedInstancesOfferings
            Resource: "*"
          - Effect: Allow
            Action:
            - iam:CreateRole
            - iam:AttachRolePolicy
            - iam:GetRole
            - iam:DeleteRole
            - iam:PassRole
            Resource: "*"
        
  IoTRmAccelDataChannel:
    Type: "AWS::IoTAnalytics::Channel"
    Properties:
      ChannelName: "iot_rm_accel_data_channel"
      RetentionPeriod:
        Unlimited: True

  IoTRmAccelDataDatastore:
    Type: "AWS::IoTAnalytics::Datastore"
    Properties:
      DatastoreName: "iot_rm_accel_data_datastore"
      RetentionPeriod:
        Unlimited: True

  IoTRmAccelDataPipeline:
    Type: "AWS::IoTAnalytics::Pipeline"
    Properties:
      PipelineName: "iot_rm_accel_data_pipeline"
      PipelineActivities:
        -
          Channel:
            ChannelName: "iot_rm_accel_data_channel"
            Name: "iot_rm_accel_data_channel"
            Next: "iot_rm_accel_data_datastore"
          Datastore:
            DatastoreName: "iot_rm_accel_data_datastore"
            Name: "iot_rm_accel_data_datastore"

  IoTRmAccelDatasetReporting:
    Type: "AWS::IoTAnalytics::Dataset"
    Properties:
      DatasetName: "iot_rm_accel_data_dataset"
      Actions:
        -
          ActionName: "SqlAction"
          QueryAction:
            SqlQuery: "select * from iot_rm_accel_data_datastore"
      Triggers:
        -
          Schedule:
            ScheduleExpression: "cron(0 * * * ? *)"
    DependsOn: IoTRmAccelDataDatastore
    
  IoTRmAccelGatewayRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: "IoTRmAccelGatewayRule"
      TopicRulePayload:
        Description: "Routes device data for storage."
        Sql: SELECT *, parse_time("yyyy-MM-dd'T'HH:mm:ss.SSSZ", timestamp()) as RealTime FROM 'iot_rm_accelerator'
        AwsIotSqlVersion: "2016-03-23"
        RuleDisabled: False
        Actions:
          - IotAnalytics:
              ChannelName: "iot_rm_accel_data_channel"
              RoleArn:
                Fn::GetAtt: [ RoleIoTRmAccelPipelineRole, "Arn" ]

  IoTThing:
    # Resource creates thing, certificate key pair, IoT policy, and associates all
    Type: Custom::IoTThing
    Properties:
      ServiceToken: !GetAtt CreateThingFunction.Arn
      ThingName: !Ref ThingName
      CertificateArn: !Ref CertificateArn
  CreateThingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateThingAndPolicy
      Description: Create thing and policy, attach certificate
      Handler: create_thing.handler
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      CodeUri: ./lambda_functions
     
  IoTDetector:
    # Resource creates IoTEvents Input and IoTEvents Detector
    Type: Custom::IoTDetector
    Properties:
      ServiceToken: !GetAtt CreateIoTDetectorFunction.Arn
      IoTEventRoleArn: !GetAtt RoleIoTRmAccelPipelineRole.Arn
      SNSArn: !Ref IoTRmAccelSNSEmail
  CreateIoTDetectorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateIoTDetector
      Description: Create Events and Detector
      Handler: create_detector.handler
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      MemorySize: 128
      CodeUri: ./lambda_functions
            
  IoTRmAccelSNSEmail:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref SNSEmail
          Protocol: email
      TopicName: "IoTRmAccelSNSEmail"